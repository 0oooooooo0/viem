import { expect, test } from 'vitest'

import { decodeRlp } from './decodeRlp'
import { stringToBytes } from './encodeBytes'
import { encodeHex, stringToHex } from './encodeHex'

test('single byte', () => {
  expect(decodeRlp('0x', 'bytes')).toStrictEqual(new Uint8Array([]))
  expect(decodeRlp('0x00', 'bytes')).toStrictEqual(new Uint8Array([0]))
  expect(decodeRlp('0x01', 'bytes')).toStrictEqual(new Uint8Array([1]))

  expect(decodeRlp('0x0', 'hex')).toBe('0x0')
  expect(decodeRlp('0x1', 'hex')).toBe('0x1')
  expect(decodeRlp('0x42', 'hex')).toBe('0x42')
  expect(decodeRlp('0x7f', 'hex')).toBe('0x7f')

  expect(decodeRlp('0x21', 'hex')).toBe(encodeHex('!'))
  expect(decodeRlp('0x61', 'hex')).toBe(encodeHex('a'))
  expect(decodeRlp('0x7e', 'hex')).toBe(encodeHex('~'))

  expect(decodeRlp('0x1', 'hex')).toBe(encodeHex(true))
  expect(decodeRlp('0x0', 'hex')).toBe(encodeHex(false))

  expect(decodeRlp('0x0', 'hex')).toBe(encodeHex(0))
  expect(decodeRlp('0x45', 'hex')).toBe(encodeHex(69))
  expect(decodeRlp('0x7f', 'hex')).toBe(encodeHex(127))
})

test('single byte >= 0x80', () => {
  expect(decodeRlp('0x8180', 'bytes')).toStrictEqual(new Uint8Array([128]))
  expect(decodeRlp('0x81ff', 'bytes')).toStrictEqual(new Uint8Array([255]))

  expect(decodeRlp('0x8180', 'hex')).toBe('0x80')
  expect(decodeRlp('0x81a4', 'hex')).toBe('0xa4')
  expect(decodeRlp('0x81ff', 'hex')).toBe('0xff')

  expect(decodeRlp('0x8180', 'hex')).toBe(encodeHex(128))
  expect(decodeRlp('0x81ff', 'hex')).toBe(encodeHex(255))

  expect(() => decodeRlp('0x81', 'hex')).toThrowErrorMatchingInlineSnapshot(
    '"data length too short"',
  )
  expect(() => decodeRlp('0x81f', 'hex')).toThrowErrorMatchingInlineSnapshot(
    '"hex value is invalid length"',
  )
})

test('multiple bytes < 56 bytes', () => {
  expect(decodeRlp('0x820100', 'bytes')).toStrictEqual(new Uint8Array([1, 0]))
  expect(decodeRlp('0x824000', 'bytes')).toStrictEqual(new Uint8Array([64, 0]))

  expect(decodeRlp('0x820100', 'hex')).toBe('0x100')
  expect(decodeRlp('0x824000', 'hex')).toBe('0x4000')
  expect(
    decodeRlp(
      '0xb710000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000',
      'hex',
    ),
  ).toBe(
    '0x10000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000',
  )

  expect(decodeRlp('0x820100', 'hex')).toBe(encodeHex(256))
  expect(decodeRlp('0x871fffffffffffff', 'hex')).toBe(
    encodeHex(Number.MAX_SAFE_INTEGER),
  )

  expect(decodeRlp('0x820100', 'hex')).toBe(encodeHex(256n))
  expect(decodeRlp('0x871fffffffffffff', 'hex')).toBe(
    encodeHex(BigInt(Number.MAX_SAFE_INTEGER)),
  )
  expect(
    decodeRlp(
      '0xb7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
      'hex',
    ),
  ).toBe(encodeHex(2n ** (55n * 8n) - 1n))

  expect(decodeRlp('0x826161', 'hex')).toBe(encodeHex('aa'))
  expect(decodeRlp('0x83646f67', 'hex')).toBe(encodeHex('dog'))
  expect(decodeRlp('0x8b68656c6c6f20776f726c64', 'hex')).toBe(
    encodeHex('hello world'),
  )
  expect(
    decodeRlp(
      '0xb768656c6c6f20776f726c64206d79206e616d65206973206a616b6520616e64206920616d206120636f6f6c20677579206c6d616f206869',
      'hex',
    ),
  ).toBe(encodeHex('hello world my name is jake and i am a cool guy lmao hi'))

  expect(() =>
    decodeRlp('0x871fffffffffff', 'hex'),
  ).toThrowErrorMatchingInlineSnapshot('"data length too short"')
  expect(() =>
    decodeRlp('0x871ffffffffffff', 'hex'),
  ).toThrowErrorMatchingInlineSnapshot('"hex value is invalid length"')
})

test('multiple bytes >= 56 bytes', () => {
  expect(
    decodeRlp(
      '0xb8500100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      'bytes',
    ),
  ).toStrictEqual(
    new Uint8Array([
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
    ]),
  )

  expect(
    decodeRlp(
      '0xb8381000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010',
      'hex',
    ),
  ).toBe(
    '0x1000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010',
  )

  expect(
    decodeRlp(
      '0xb8386161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161',
      'hex',
    ),
  ).toBe(
    stringToHex('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'),
  )
  expect(
    decodeRlp(
      '0xb
      'hex',
    ),
  ).toBe(
    stringToHex(
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    ),
  )
  expect(
    decodeRlp(
      '0xb
      'hex',
    ),
  ).toBe(
    stringToHex(
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    ),
  )
  expect(
    decodeRlp(
      '0xb8c468656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d20',
      'hex',
    ),
  ).toBe(
    stringToHex(
      'hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem ',
    ),
  )
  expect(
    decodeRlp(
      '0xb90c4068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d2068656c6c6f20776f726c642077656c636f6d6520746f207669656d20',
      'hex',
    ),
  ).toBe(
    stringToHex(
      'hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem hello world welcome to viem ',
    ),
  )

  expect(
    decodeRlp(
      '0xb8380100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      'hex',
    ),
  ).toBe(encodeHex(2n ** (55n * 8n)))
  expect(
    decodeRlp(
      '0xb881010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      'hex',
    ),
  ).toBe(encodeHex(2n ** (128n * 8n)))
  expect(
    decodeRlp(
      '0xb
      'hex',
    ),
  ).toBe(encodeHex(2n ** (1024n * 8n)))

  expect(() =>
    decodeRlp(
      '0xb85001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      'bytes',
    ),
  ).toThrowErrorMatchingInlineSnapshot('"data length too short"')
  expect(() =>
    decodeRlp(
      '0xb82001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      'bytes',
    ),
  ).toThrowErrorMatchingInlineSnapshot(
    '"rlp prefix length is less than data length"',
  )
  expect(() =>
    decodeRlp(
      '0xb850010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      'bytes',
    ),
  ).toThrowErrorMatchingInlineSnapshot('"hex value is invalid length"')
})

test('array', () => {
  expect(decodeRlp('0xc17f', 'bytes')).toStrictEqual([new Uint8Array([127])])
  expect(decodeRlp('0xc17f', 'hex')).toStrictEqual(['0x7f'])

  expect(decodeRlp('0xc28180', 'bytes')).toStrictEqual([new Uint8Array([128])])
  expect(decodeRlp('0xc28180', 'hex')).toStrictEqual(['0x80'])

  expect(decodeRlp('0xc67f7f838081e8', 'bytes')).toStrictEqual([
    new Uint8Array([127]),
    new Uint8Array([127]),
    new Uint8Array([128, 129, 232]),
  ])
  expect(decodeRlp('0xcc838081e8838081e8838081e8', 'bytes')).toStrictEqual([
    new Uint8Array([128, 129, 232]),
    new Uint8Array([128, 129, 232]),
    new Uint8Array([128, 129, 232]),
  ])
  expect(decodeRlp('0xc78181c481818181', 'bytes')).toStrictEqual([
    new Uint8Array([129]),
    [new Uint8Array([129]), new Uint8Array([129])],
  ])

  expect(decodeRlp('0xc7c0c1c0c3c0c1c0', 'hex')).toStrictEqual([
    [],
    [[]],
    [[], [[]]],
  ])
  expect(
    decodeRlp('0xd0c28181c4c38281ffc7c17fc4c3824b81', 'bytes'),
  ).toStrictEqual([
    [new Uint8Array([129])],
    [[new Uint8Array([129, 255])]],
    [[new Uint8Array([127])], [[new Uint8Array([75, 129])]]],
  ])

  expect(
    decodeRlp(
      '0xf90406bc28181',
      'bytes',
    ),
  ).toStrictEqual([
    stringToBytes(
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    ),
    [new Uint8Array([129])],
  ])

  expect(
    decodeRlp(
      '
      'hex',
    ),
  ).toStrictEqual([
    stringToHex(
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    ),
    [
      stringToHex(
        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      ),
      stringToHex(
        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      ),
      [
        stringToHex(
          'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        ),
        stringToHex(
          'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        ),
        stringToHex(
          'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        ),
      ],
    ],
    stringToHex(
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    ),
    [
      stringToHex(
        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      ),
      stringToHex(
        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      ),
      stringToHex(
        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      ),
    ],
  ])

  expect(() =>
    decodeRlp('0xc7c0c1c0c3c0c0', 'hex'),
  ).toThrowErrorMatchingInlineSnapshot('"data length too short"')
  expect(() =>
    decodeRlp('0xd0c28181c4c38281ffc7c17fc3c3824b81', 'bytes'),
  ).toThrowErrorMatchingInlineSnapshot('"data length too long"')
})

test('input: bytes', () => {
  expect(decodeRlp(new Uint8Array([130, 64, 0]), 'hex')).toStrictEqual('0x4000')
})
